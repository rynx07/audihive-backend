// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int      @id @default(autoincrement())
  role      Role?
  profile   Profile?
}

model Posts {
  post_ID   Int     @id @default(autoincrement())
  content   String
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?
}

enum Role {
  ADMIN
  MUSICIAN
  EVENT_ORG 
}

model Profile {
  id             Int      @id @default(autoincrement())
  username       String
  password       String
  category       String
  balance        Float    @default(0)
  earnings       Float    @default(0)

  AdminID        Int?     @unique
  user           Users?   @relation(fields: [AdminID], references: [id])
  posts          Posts[]
  purchases      Purchase[] @relation("Buyer")
  sales          Purchase[] @relation("Seller")

  sentChats      Chat[]   @relation("SentChats")
  receivedChats  Chat[]   @relation("ReceivedChats")
}

model Merch {
  id        Int     @id @default(autoincrement())
  merchName String
  merchType String 
  merchCost Float  
  merchQty  Float
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int
}

model Tickets {
  id         Int     @id @default(autoincrement())
  ticketName String 
  ticketType String 
  ticketCost Float 
  ticketQty  Float 
}

model Events {
  id        Int     @id @default(autoincrement())
  eventName String
  eventDate String 
}

model Purchase {
  id        Int      @id @default(autoincrement())
  buyerId   Int
  sellerId  Int
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyer     Profile  @relation("Buyer", fields: [buyerId], references: [id])
  seller    Profile  @relation("Seller", fields: [sellerId], references: [id])
}

model Chat {
  id        Int      @id @default(autoincrement())
  senderId  Int
  receiverId Int
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender    Profile  @relation("SentChats", fields: [senderId], references: [id])
  receiver  Profile  @relation("ReceivedChats", fields: [receiverId], references: [id])
}
